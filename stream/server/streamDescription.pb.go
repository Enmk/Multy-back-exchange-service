// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server/streamDescription.proto

/*
Package server is a generated protocol buffer package.

It is generated from these files:
	server/streamDescription.proto

It has these top-level messages:
	Tickers
	ExchangeTickers
	Ticker
	WhoAreYouParams
*/
package server

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Tickers struct {
	ExchangeTickers []*ExchangeTickers `protobuf:"bytes,1,rep,name=exchangeTickers" json:"exchangeTickers,omitempty"`
}

func (m *Tickers) Reset()                    { *m = Tickers{} }
func (m *Tickers) String() string            { return proto.CompactTextString(m) }
func (*Tickers) ProtoMessage()               {}
func (*Tickers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Tickers) GetExchangeTickers() []*ExchangeTickers {
	if m != nil {
		return m.ExchangeTickers
	}
	return nil
}

type ExchangeTickers struct {
	TimpeStamp int64     `protobuf:"varint,1,opt,name=timpeStamp" json:"timpeStamp,omitempty"`
	Exchange   string    `protobuf:"bytes,2,opt,name=exchange" json:"exchange,omitempty"`
	Tickers    []*Ticker `protobuf:"bytes,3,rep,name=tickers" json:"tickers,omitempty"`
}

func (m *ExchangeTickers) Reset()                    { *m = ExchangeTickers{} }
func (m *ExchangeTickers) String() string            { return proto.CompactTextString(m) }
func (*ExchangeTickers) ProtoMessage()               {}
func (*ExchangeTickers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ExchangeTickers) GetTimpeStamp() int64 {
	if m != nil {
		return m.TimpeStamp
	}
	return 0
}

func (m *ExchangeTickers) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *ExchangeTickers) GetTickers() []*Ticker {
	if m != nil {
		return m.Tickers
	}
	return nil
}

type Ticker struct {
	Symbol     string `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Rate       string `protobuf:"bytes,2,opt,name=rate" json:"rate,omitempty"`
	Target     string `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	Referrence string `protobuf:"bytes,4,opt,name=referrence" json:"referrence,omitempty"`
}

func (m *Ticker) Reset()                    { *m = Ticker{} }
func (m *Ticker) String() string            { return proto.CompactTextString(m) }
func (*Ticker) ProtoMessage()               {}
func (*Ticker) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Ticker) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Ticker) GetRate() string {
	if m != nil {
		return m.Rate
	}
	return ""
}

func (m *Ticker) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *Ticker) GetReferrence() string {
	if m != nil {
		return m.Referrence
	}
	return ""
}

type WhoAreYouParams struct {
}

func (m *WhoAreYouParams) Reset()                    { *m = WhoAreYouParams{} }
func (m *WhoAreYouParams) String() string            { return proto.CompactTextString(m) }
func (*WhoAreYouParams) ProtoMessage()               {}
func (*WhoAreYouParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*Tickers)(nil), "server.Tickers")
	proto.RegisterType((*ExchangeTickers)(nil), "server.ExchangeTickers")
	proto.RegisterType((*Ticker)(nil), "server.Ticker")
	proto.RegisterType((*WhoAreYouParams)(nil), "server.WhoAreYouParams")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TickerGRPCServer service

type TickerGRPCServerClient interface {
	Tickers(ctx context.Context, in *WhoAreYouParams, opts ...grpc.CallOption) (TickerGRPCServer_TickersClient, error)
}

type tickerGRPCServerClient struct {
	cc *grpc.ClientConn
}

func NewTickerGRPCServerClient(cc *grpc.ClientConn) TickerGRPCServerClient {
	return &tickerGRPCServerClient{cc}
}

func (c *tickerGRPCServerClient) Tickers(ctx context.Context, in *WhoAreYouParams, opts ...grpc.CallOption) (TickerGRPCServer_TickersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TickerGRPCServer_serviceDesc.Streams[0], c.cc, "/server.TickerGRPCServer/tickers", opts...)
	if err != nil {
		return nil, err
	}
	x := &tickerGRPCServerTickersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TickerGRPCServer_TickersClient interface {
	Recv() (*Tickers, error)
	grpc.ClientStream
}

type tickerGRPCServerTickersClient struct {
	grpc.ClientStream
}

func (x *tickerGRPCServerTickersClient) Recv() (*Tickers, error) {
	m := new(Tickers)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TickerGRPCServer service

type TickerGRPCServerServer interface {
	Tickers(*WhoAreYouParams, TickerGRPCServer_TickersServer) error
}

func RegisterTickerGRPCServerServer(s *grpc.Server, srv TickerGRPCServerServer) {
	s.RegisterService(&_TickerGRPCServer_serviceDesc, srv)
}

func _TickerGRPCServer_Tickers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WhoAreYouParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TickerGRPCServerServer).Tickers(m, &tickerGRPCServerTickersServer{stream})
}

type TickerGRPCServer_TickersServer interface {
	Send(*Tickers) error
	grpc.ServerStream
}

type tickerGRPCServerTickersServer struct {
	grpc.ServerStream
}

func (x *tickerGRPCServerTickersServer) Send(m *Tickers) error {
	return x.ServerStream.SendMsg(m)
}

var _TickerGRPCServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "server.TickerGRPCServer",
	HandlerType: (*TickerGRPCServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "tickers",
			Handler:       _TickerGRPCServer_Tickers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server/streamDescription.proto",
}

func init() { proto.RegisterFile("server/streamDescription.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0x3b, 0x4f, 0xc3, 0x30,
	0x10, 0xc7, 0x09, 0xa9, 0x52, 0x7a, 0x48, 0x04, 0x6e, 0x80, 0xa8, 0x43, 0x55, 0x65, 0xca, 0x14,
	0x50, 0x19, 0x98, 0x2b, 0x40, 0x0c, 0x30, 0x54, 0x2e, 0x12, 0x62, 0x74, 0xa3, 0xa3, 0x8d, 0xa8,
	0xe3, 0xe8, 0x6c, 0x5e, 0xdf, 0x1e, 0xd5, 0x4e, 0xa2, 0x36, 0x5b, 0xfe, 0x8f, 0xdc, 0xfd, 0x6c,
	0xc3, 0xc4, 0x10, 0x7f, 0x13, 0x5f, 0x1b, 0xcb, 0x24, 0xd5, 0x03, 0x99, 0x82, 0xcb, 0xda, 0x96,
	0xba, 0xca, 0x6b, 0xd6, 0x56, 0x63, 0xe4, 0xf3, 0xf4, 0x05, 0x86, 0xaf, 0x65, 0xf1, 0x49, 0x6c,
	0x70, 0x0e, 0x31, 0xfd, 0x16, 0x1b, 0x59, 0xad, 0xa9, 0xb1, 0x92, 0x60, 0x1a, 0x66, 0xa7, 0xb3,
	0xab, 0xdc, 0x97, 0xf3, 0xc7, 0xc3, 0x58, 0xf4, 0xfb, 0xe9, 0x0f, 0xc4, 0xbd, 0x0e, 0x4e, 0x00,
	0x6c, 0xa9, 0x6a, 0x5a, 0x5a, 0xa9, 0xea, 0x24, 0x98, 0x06, 0x59, 0x28, 0xf6, 0x1c, 0x1c, 0xc3,
	0x49, 0x3b, 0x25, 0x39, 0x9e, 0x06, 0xd9, 0x48, 0x74, 0x1a, 0x33, 0x18, 0xda, 0x86, 0x24, 0x74,
	0x24, 0x67, 0x2d, 0x89, 0x9f, 0x2e, 0xda, 0x38, 0xdd, 0x42, 0xe4, 0x2d, 0xbc, 0x84, 0xc8, 0xfc,
	0xa9, 0x95, 0xde, 0xba, 0x5d, 0x23, 0xd1, 0x28, 0x44, 0x18, 0xb0, 0xb4, 0xed, 0x0e, 0xf7, 0xbd,
	0xeb, 0x5a, 0xc9, 0x6b, 0xb2, 0x49, 0xe8, 0xbb, 0x5e, 0xed, 0x98, 0x99, 0x3e, 0x88, 0x99, 0xaa,
	0x82, 0x92, 0x81, 0xcb, 0xf6, 0x9c, 0xf4, 0x02, 0xe2, 0xb7, 0x8d, 0x9e, 0x33, 0xbd, 0xeb, 0xaf,
	0x85, 0x64, 0xa9, 0xcc, 0xec, 0x19, 0xce, 0x3d, 0xc0, 0x93, 0x58, 0xdc, 0x2f, 0x1d, 0x24, 0xde,
	0x75, 0xf8, 0xd8, 0x5d, 0x61, 0xef, 0xbf, 0x71, 0x7c, 0x78, 0x22, 0x93, 0x1e, 0xdd, 0x04, 0xab,
	0xc8, 0xbd, 0xd1, 0xed, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc3, 0x2c, 0x93, 0x79, 0xc5, 0x01,
	0x00, 0x00,
}
